@model ReflectionIT.Mvc.Paging.IPagingList
@* Boostrap 3 based pager *@

@{
    var start = this.Model.StartPageIndex;
    var stop = this.Model.StopPageIndex;
}

@if (this.Model.PageCount > 1)
{
    <ul class="pagination">

        @if (start > 1)
        {
            <li>
                <a href="@Url.Action(Model.Action, Model.GetRouteValueForPage(1))">
                    1
                </a>
            </li>
        }

        @if (this.Model.PageIndex > 1)
        {
            <li>
                <a href="@Url.Action(Model.Action, Model.GetRouteValueForPage(this.Model.PageIndex - 1))">
                    <i class="material-icons">chevron_left</i>
                </a>
            </li>
        }
        else
        {
            <li class="disabled">
                <a href="">
                    <i class="material-icons">chevron_left</i>
                </a>
            </li>
        }

        @for (int i = start; i <= stop; i++)
        {
            <li class="@((Model.PageIndex == i) ? "active" : "waves-effect")">
                @Html.ActionLink(i.ToString(), Model.Action, Model.GetRouteValueForPage(i))
            </li>
        }

        @if (this.Model.PageIndex < this.Model.PageCount)
        {
            <li>
                <a href="@Url.Action(Model.Action, Model.GetRouteValueForPage(this.Model.PageIndex + 1))">
                    <i class="material-icons">chevron_right</i>
                </a>
            </li>
        }
        else
            {
                <li class="disabled">
                    <a href="">
                        <i class="material-icons">chevron_right</i>
                    </a>
                </li>
            }

        @if (stop < this.Model.PageCount)
        {
            <li>
                <a href="@Url.Action(Model.Action, Model.GetRouteValueForPage(this.Model.PageCount))">
                    @this.Model.PageCount
                </a>
            </li>
        }

    </ul>
}